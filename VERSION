V418

Release Date: 2025-01-30

Backend Fix: Spawn Position Initialization + Performance Optimization

Fixed critical spawn position issue where server didn't initialize player positions, causing desynchronization.
Also fixed latency regression (35ms â†’ 70ms) caused by excessive logging.

Root Cause:
- Server initialized players at (0, 0) by default in addPlayer()
- No spawn position initialization when game started
- Clients generated their own spawn positions locally, causing disagreement
- Server collision detection used (0, 0) while clients rendered at different positions
- Result: Knives appeared to hit empty space but actually hit players at (0, 0)
- High-frequency logging on every playerMove event caused server event loop blocking
- Logging overhead increased latency from 35ms to 70ms

Changes:
- Added initializeSpawnPositions() function to set authoritative spawn positions
- Team 1 spawns at (-30, 0), Team 2 spawns at (30, 0)
- Called at start of startGameLoop() before game loop begins
- Immediately broadcasts initial game state with spawn positions
- Removed high-frequency logs: [SERVER] Player move request on every move
- Removed high-frequency logs: [GAME-ENGINE] moving to on every move
- Changed stats logging from every 1 second to every 5 seconds
- This reduces server event loop blocking and improves latency

Technical Details:
- Spawn positions are set in player.x, player.z, player.targetX, player.targetZ
- First broadcastGameState() sent immediately after spawn initialization
- Ensures clients receive authoritative positions before first tick
- Stats now show average ticks/sec and broadcasts/sec over 5 second window

Previous Fixes (V417):

Changes:
- Added real delta time calculation in tick() function
- Changed updatePlayerMovement(dt) to use actual elapsed time instead of fixed interval
- Changed updateKnives(dt) to use actual elapsed time
- Added dt clamping (max 0.1s) to prevent huge jumps after pauses
- Added time-based network update accumulator (replaces tick counter)
- Added per-second logging: ticks/sec and broadcasts/sec for monitoring
- Movement now uses: moveDistance = PLAYER_SPEED * dt (where dt is in seconds)

Technical Details:
- PLAYER_SPEED remains 2.5 units/second
- dt is calculated as: (now - lastUpdateTime) / 1000 and clamped to max 0.1s
- Network updates accumulate time and broadcast when >= 1/20 seconds (50ms)
- Server logs actual tick rate and broadcast rate every second for monitoring

Previous Fixes (V416):

Issue 1: Render Deployment Timeout
Root Cause:
- Server was not binding to '0.0.0.0' (required for Render's external health checks)
- Missing health check endpoint for Render to probe

Changes:
- Added health check routes: GET / and GET /health
- Server now binds to '0.0.0.0' explicitly
- Added detailed startup logging showing PORT and host

Issue 2: Team Selection Blocked in 1v1 Mode
Root Cause:
- teamSelect handler blocked ALL team selection in 1v1 mode
- Should only block team SWITCHING, not initial selection

Changes:
- Fixed teamSelect handler to check if player is already in a team
- Only blocks switching after player is assigned (allows first-time selection)
- Added comprehensive debugging logs with [TEAM-SELECT-SERVER] prefix
- Added team capacity validation (1v1: 1 per team, 3v3: 3 per team)

Issue 3: Host Disconnect Not Handled
Root Cause:
- When host disconnected, room remained open with guests stuck inside
- No cleanup or notification to remaining players

Changes:
- Added host disconnect detection in disconnect handler
- When host disconnects, emit hostDisconnected event to all players
- Immediately close room and clean up game engine
- Added [DISCONNECT] logging for debugging

Previous Version (V410):
- Server-Authoritative Architecture Implementation
- 60Hz server game loop with 20Hz network updates
- Client-side prediction with server reconciliation
