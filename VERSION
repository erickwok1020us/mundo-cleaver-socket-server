V423

Release Date: 2025-01-30

Backend Fix: Movement Speed Synchronization

Fixed critical bug where characters moved extremely slowly (taking 1 minute to reach nearby locations).
Server PLAYER_SPEED was 2.5 units/sec but client expected 23.4 units/sec (9.36x mismatch).

Root Cause:
- Server PLAYER_SPEED was set to 2.5 units/second
- Client moveSpeed was 0.39 units/frame at 60 FPS = 23.4 units/second
- Server was moving players 9.36x slower than client expected
- Client would predict movement, then get snapped back by slow server position
- Result: Extreme stuttering and slow movement (1 minute to reach nearby locations)

Changes:
- Increased server PLAYER_SPEED from 2.5 to 23.4 units/second to match client
- Server now moves players at the same effective speed as client expects
- This eliminates the constant position corrections that caused stuttering

Technical Details:
- Server dt is in seconds: (now - lastUpdateTime) / 1000
- Server moveDistance = PLAYER_SPEED * dt = 23.4 * dt
- Client moveSpeed = 0.39 units/frame (no dt scaling)
- At 60 FPS: 0.39 Ã— 60 = 23.4 units/second
- Speeds now match, eliminating the 9.36x mismatch

Previous Fixes (V422):
- Added targetX/targetZ to broadcastGameState for movement synchronization
- Added 100ms grace window to prevent stale server updates overwriting fresh clicks
- Added team type coercion with Number()
- Removed self.isMoving overwrite from server

Previous Fixes (V419):
- Fixed spawn position bug (team type coercion with Number())
- Fixed latency regression (removed high-frequency logs)
- Spawn positions: Team 1 at (-30, 0), Team 2 at (30, 0)

Previous Fixes (V417):

Changes:
- Added real delta time calculation in tick() function
- Changed updatePlayerMovement(dt) to use actual elapsed time instead of fixed interval
- Changed updateKnives(dt) to use actual elapsed time
- Added dt clamping (max 0.1s) to prevent huge jumps after pauses
- Added time-based network update accumulator (replaces tick counter)
- Added per-second logging: ticks/sec and broadcasts/sec for monitoring
- Movement now uses: moveDistance = PLAYER_SPEED * dt (where dt is in seconds)

Technical Details:
- PLAYER_SPEED remains 2.5 units/second
- dt is calculated as: (now - lastUpdateTime) / 1000 and clamped to max 0.1s
- Network updates accumulate time and broadcast when >= 1/20 seconds (50ms)
- Server logs actual tick rate and broadcast rate every second for monitoring

Previous Fixes (V416):

Issue 1: Render Deployment Timeout
Root Cause:
- Server was not binding to '0.0.0.0' (required for Render's external health checks)
- Missing health check endpoint for Render to probe

Changes:
- Added health check routes: GET / and GET /health
- Server now binds to '0.0.0.0' explicitly
- Added detailed startup logging showing PORT and host

Issue 2: Team Selection Blocked in 1v1 Mode
Root Cause:
- teamSelect handler blocked ALL team selection in 1v1 mode
- Should only block team SWITCHING, not initial selection

Changes:
- Fixed teamSelect handler to check if player is already in a team
- Only blocks switching after player is assigned (allows first-time selection)
- Added comprehensive debugging logs with [TEAM-SELECT-SERVER] prefix
- Added team capacity validation (1v1: 1 per team, 3v3: 3 per team)

Issue 3: Host Disconnect Not Handled
Root Cause:
- When host disconnected, room remained open with guests stuck inside
- No cleanup or notification to remaining players

Changes:
- Added host disconnect detection in disconnect handler
- When host disconnects, emit hostDisconnected event to all players
- Immediately close room and clean up game engine
- Added [DISCONNECT] logging for debugging

Previous Version (V410):
- Server-Authoritative Architecture Implementation
- 60Hz server game loop with 20Hz network updates
- Client-side prediction with server reconciliation
